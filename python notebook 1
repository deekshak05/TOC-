{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "program to operate files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "f=open(\"Deeksha1.txt\",\"x\")\n",
    "f=open(\"Deeksha1.text\",\"w\")\n",
    "f.write(\"Hello this is a file used for understanding files in python\")\n",
    "f.close()\n",
    "f=open(\"Deeksha1.text\",\"r\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Program to count words from a file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Write name of fileS Deeksha.txt\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "f=open(\"Deeksha1.text\",\"w\")\n",
    "f.write(\"Hello this is my first file\")\n",
    "f.close()\n",
    "wc=0\n",
    "fi=input(\"Write name of file\")\n",
    "with open(fi,'r') as file:\n",
    "    for line in file:\n",
    "        l=line.split()\n",
    "        wc=wc+len(l)\n",
    "print(wc)\n",
    "        \n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "program to show basic implementation of stack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "mango\n",
      "orange\n",
      "apple\n",
      "0\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "class stack:\n",
    "    def __init__ (self):\n",
    "        self.items=[]\n",
    "    def push(self,item):\n",
    "        self.items.append(item)\n",
    "    def pop(self):\n",
    "        return self.items.pop()\n",
    "    def isempty(self):\n",
    "        return self.items==[]\n",
    "    def size(self):\n",
    "        return len(self.items)\n",
    "s=stack()\n",
    "s.push('apple')\n",
    "s.push('orange')\n",
    "s.push('mango')\n",
    "print(s.size())\n",
    "print(s.pop())\n",
    "print(s.pop())\n",
    "print(s.pop())\n",
    "print(s.size())\n",
    "print(s.isempty())\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "program to check balanced or unbalanced string through stack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the string ((()))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "balanced\n"
     ]
    }
   ],
   "source": [
    "#testcase1\n",
    "class stack:\n",
    "    def __init__ (self):\n",
    "        self.items=[]\n",
    "    def push(self,item):\n",
    "        self.items.append(item)\n",
    "    def pop(self):\n",
    "        return self.items.pop()\n",
    "    def isempty(self):\n",
    "        return self.items==[]\n",
    "    def size(self):\n",
    "        return len(self.items)\n",
    "s=stack()\n",
    "a=input(\"Enter the string\")\n",
    "\n",
    "for i in range(len(a)):\n",
    "    if a[i]==\"(\":\n",
    "        s.push(a[i])\n",
    "    elif a[i]==\")\":\n",
    "        if s.isempty():\n",
    "            print(\"unbalanced\")\n",
    "            break\n",
    "        else:\n",
    "            s.pop()\n",
    "            if s.isempty() and i==(len(a)-1):\n",
    "                print(\"balanced\")\n",
    "\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the string ()))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "unbalanced\n"
     ]
    }
   ],
   "source": [
    "#testcase2\n",
    "class stack:\n",
    "    def __init__ (self):\n",
    "        self.items=[]\n",
    "    def push(self,item):\n",
    "        self.items.append(item)\n",
    "    def pop(self):\n",
    "        return self.items.pop()\n",
    "    def isempty(self):\n",
    "        return self.items==[]\n",
    "    def size(self):\n",
    "        return len(self.items)\n",
    "s=stack()\n",
    "a=input(\"Enter the string\")\n",
    "\n",
    "for i in range(len(a)):\n",
    "    if a[i]==\"(\":\n",
    "        s.push(a[i])\n",
    "    elif a[i]==\")\":\n",
    "        if s.isempty():\n",
    "            print(\"unbalanced\")\n",
    "            break\n",
    "        else:\n",
    "            s.pop()\n",
    "            if s.isempty() and i==(len(a)-1):\n",
    "                print(\"balanced\")\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
